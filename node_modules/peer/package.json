{
  "name": "peer",
  "version": "0.2.8",
  "description": "PeerJS server component",
  "main": "lib/index.js",
  "bin": {
    "peerjs": "./bin/peerjs"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/peers/peerjs-server.git"
  },
  "author": {
    "name": "Michelle Bu, Eric Zhang"
  },
  "license": "MIT",
  "dependencies": {
    "body-parser": "^1.9.0",
    "express": "^4.9.8",
    "optimist": "~0.6.1",
    "ws": "~0.4.25",
    "cors": "~2.5.0"
  },
  "devDependencies": {
    "expect.js": "*",
    "sinon": "*",
    "mocha": "*"
  },
  "engines": {
    "node": ">=0.8"
  },
  "scripts": {
    "test": "mocha test",
    "start": "bin/peerjs --port ${PORT:=9000}"
  },
  "readme": "[![Build Status](https://travis-ci.org/peers/peerjs-server.png?branch=master)](https://travis-ci.org/peers/peerjs-server)\n\n# PeerServer: A server for PeerJS #\n\nPeerServer helps broker connections between PeerJS clients. Data is not proxied through the server.\n\n##[http://peerjs.com](http://peerjs.com)\n\n**If you prefer to use a cloud hosted PeerServer instead of running your own, [sign up for a free API key here](http://peerjs.com/peerserver)**\n\nor\n\n[![Deploy](https://www.herokucdn.com/deploy/button.png)](https://heroku.com/deploy)\n\n### Run PeerServer\n\nInstall the library:\n\n```bash\n$> npm install peer\n```\n\nRun the server:\n\n```bash\n$> peerjs --port 9000 --key peerjs\n```\n\nOr, create a custom server:\n\n```javascript\nvar PeerServer = require('peer').PeerServer;\nvar server = PeerServer({port: 9000, path: '/myapp'});\n```\n\nConnecting to the server from PeerJS:\n\n```html\n<script>\n    // No API key required when not using cloud server\n    var peer = new Peer('someid', {host: 'localhost', port: 9000, path: '/myapp'});\n</script>\n```\n\nUsing HTTPS: Simply pass in PEM-encoded certificate and key.\n\n```javascript\nvar fs = require('fs');\nvar PeerServer = require('peer').PeerServer;\n\nvar server = PeerServer({\n  port: 9000,\n  ssl: {\n    key: fs.readFileSync('/path/to/your/ssl/key/here.key'),\n    cert: fs.readFileSync('/path/to/your/ssl/certificate/here.crt')\n  }\n});\n```\n\n#### Running PeerServer behind a reverse proxy\n\nMake sure to set the `proxied` option, otherwise IP based limiting will fail.\nThe option is passed verbatim to the\n[expressjs `trust proxy` setting](http://expressjs.com/4x/api.html#app-settings)\nif it is truthy.\n\n```javascript\nvar PeerServer = require('peer').PeerServer;\nvar server = PeerServer({port: 9000, path: '/myapp', proxied: true});\n```\n\n### Combining with existing express app\n\n```javascript\nvar express = require('express');\nvar app = express();\nvar ExpressPeerServer = require('peer').ExpressPeerServer;\n\napp.get('/', function(req, res, next) { res.send('Hello world!'); });\n\nvar server = app.listen(9000);\n\nvar options = {\n    debug: true\n}\n\napp.use('/api', ExpressPeerServer(server, options));\n\n// OR\n\nvar server = require('http').createServer(app);\n\napp.use('/peerjs', ExpressPeerServer(server, options));\n\nserver.listen(9000);\n```\n\n### Events\n\nThe `'connection'` event is emitted when a peer connects to the server.\n\n```javascript\nserver.on('connection', function(id) { ... });\n```\n\nThe `'disconnect'` event is emitted when a peer disconnects from the server or\nwhen the peer can no longer be reached.\n\n```javascript\nserver.on('disconnect', function(id) { ... });\n```\n\n## Problems?\n\nDiscuss PeerJS on our Google Group:\nhttps://groups.google.com/forum/?fromgroups#!forum/peerjs\n\nPlease post any bugs as a Github issue.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/peers/peerjs-server/issues"
  },
  "_id": "peer@0.2.8",
  "_from": "peer@*"
}
